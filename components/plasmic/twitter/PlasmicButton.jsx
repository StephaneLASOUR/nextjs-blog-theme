// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXtxfUL95PU6ZxWcFtpsj
// Component: upJGYFxFWp8T
import * as React from 'react';
import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from '@plasmicapp/react-web';
import '@plasmicapp/react-web/lib/plasmic.css';
import projectcss from './plasmic_twitter.module.css'; // plasmic-import: tXtxfUL95PU6ZxWcFtpsj/projectcss
import sty from './PlasmicButton.module.css'; // plasmic-import: upJGYFxFWp8T/css

export const PlasmicButton__VariantProps = new Array('options');

export const PlasmicButton__ArgProps = new Array('children');

function PlasmicButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign({}, props.args);
  const $props = args;
  return (
    <button
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootoptions_primary]: hasVariant(variants, 'options', 'primary'),
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: 'Follow',
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenoptions_primary]: hasVariant(
            variants,
            'options',
            'primary'
          ),
        }),
      })}
    </button>
  );
}

const PlasmicDescendants = {
  root: ['root'],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps,
    });

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicButton';
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps,
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
