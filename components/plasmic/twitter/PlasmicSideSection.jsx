// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXtxfUL95PU6ZxWcFtpsj
// Component: BjOUYhoMAIAL
import * as React from 'react';
import Link from 'next/link';
import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from '@plasmicapp/react-web';
import Trend from '../../Trend'; // plasmic-import: WunYD34zulRt/component
import '@plasmicapp/react-web/lib/plasmic.css';
import projectcss from './plasmic_twitter.module.css'; // plasmic-import: tXtxfUL95PU6ZxWcFtpsj/projectcss
import sty from './PlasmicSideSection.module.css'; // plasmic-import: BjOUYhoMAIAL/css

export const PlasmicSideSection__VariantProps = new Array();

export const PlasmicSideSection__ArgProps = new Array('children', 'slot');

function PlasmicSideSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign({}, props.args);
  const $props = args;
  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__jekOc)}>
        <div className={classNames(projectcss.all, sty.freeBox__lshYo)}>
          {p.renderPlasmicSlot({
            defaultContents: "What's happening",
            value: args.children,
            className: classNames(sty.slotTargetChildren),
          })}
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox___54KtJ)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <Trend
                className={classNames('__wab_instance', sty.trend__aFc1Q)}
              />

              <Trend
                className={classNames('__wab_instance', sty.trend__pkUzq)}
              />
            </React.Fragment>
          ),

          value: args.slot,
        })}
      </div>

      <p.PlasmicLink
        data-plasmic-name={'link'}
        data-plasmic-override={overrides.link}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.__wab_text,
          sty.link
        )}
        component={Link}
        href={'#'}
        platform={'nextjs'}
      >
        {'Show more'}
      </p.PlasmicLink>
    </div>
  );
}

const PlasmicDescendants = {
  root: ['root', 'link'],
  link: ['link'],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideSection__ArgProps,
      internalVariantPropNames: PlasmicSideSection__VariantProps,
    });

    return PlasmicSideSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSideSection';
  } else {
    func.displayName = `PlasmicSideSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSideSection = Object.assign(
  // Top-level PlasmicSideSection renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent('link'),
    // Metadata about props expected for PlasmicSideSection
    internalVariantProps: PlasmicSideSection__VariantProps,
    internalArgProps: PlasmicSideSection__ArgProps,
  }
);

export default PlasmicSideSection;
/* prettier-ignore-end */
