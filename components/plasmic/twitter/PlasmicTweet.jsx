// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXtxfUL95PU6ZxWcFtpsj
// Component: Q-5iAFzkJ6TL
import * as React from 'react';
import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from '@plasmicapp/react-web';
import Avatar from '../../Avatar'; // plasmic-import: r-Q4nz0OELxu/component
import ActionButton from '../../ActionButton'; // plasmic-import: Kw25oLZaMx3/component
import '@plasmicapp/react-web/lib/plasmic.css';
import projectcss from './plasmic_twitter.module.css'; // plasmic-import: tXtxfUL95PU6ZxWcFtpsj/projectcss
import sty from './PlasmicTweet.module.css'; // plasmic-import: Q-5iAFzkJ6TL/css
import IconIcon from './icons/PlasmicIcon__Icon'; // plasmic-import: q_S1JIUrFDmI/icon
import ReplyIcon from './icons/PlasmicIcon__Reply'; // plasmic-import: Wbe9LuzPJUbt/icon
import RetweetIcon from './icons/PlasmicIcon__Retweet'; // plasmic-import: Jc92eBYScYsw/icon
import LikeIcon from './icons/PlasmicIcon__Like'; // plasmic-import: RZb7wkMn2jlD/icon
import ShareIcon from './icons/PlasmicIcon__Share'; // plasmic-import: COZwEd-MAsyv/icon

export const PlasmicTweet__VariantProps = new Array('options');

export const PlasmicTweet__ArgProps = new Array(
  'name',
  'username',
  'children',
  'photo',
  'timestamp'
);

function PlasmicTweet__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign({}, props.args);
  const $props = args;
  return (
    <div
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__an6Zm)}
      >
        <p.Stack
          as={'div'}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wUraM)}
        >
          <Avatar
            data-plasmic-name={'avatar'}
            data-plasmic-override={overrides.avatar}
            className={classNames('__wab_instance', sty.avatar)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={''}
                  className={classNames(sty.img__am4Vn)}
                  displayHeight={'49px'}
                  displayMaxHeight={'none'}
                  displayMaxWidth={'none'}
                  displayMinHeight={'0'}
                  displayMinWidth={'0'}
                  displayWidth={'49px'}
                  src={{
                    src: '/plasmic/twitter/images/image3.png',
                    fullWidth: 400,
                    fullHeight: 400,
                    aspectRatio: undefined,
                  }}
                />
              ),

              value: args.photo,
            })}
          </Avatar>

          {(hasVariant(variants, 'options', 'hasReplies') ? true : false) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__af9Ir, {
                [sty.freeBoxoptions_hasReplies__af9IrRmomH]: hasVariant(
                  variants,
                  'options',
                  'hasReplies'
                ),
              })}
            />
          ) : null}
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__yrMjN)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__uz2RR)}>
          <p.Stack
            as={'div'}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___1OmZl)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__yBvi1)}>
              <div className={classNames(projectcss.all, sty.freeBox__pdQdz)}>
                {p.renderPlasmicSlot({
                  defaultContents: 'Dan Abramov',
                  value: args.name,
                  className: classNames(sty.slotTargetName),
                })}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__zbaoj)}>
              {p.renderPlasmicSlot({
                defaultContents: '@dan_abramov',
                value: args.username,
                className: classNames(sty.slotTargetUsername),
              })}
            </div>

            <div
              data-plasmic-name={'text'}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {'Â·'}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: '9h',
              value: args.timestamp,
              className: classNames(sty.slotTargetTimestamp),
            })}
          </p.Stack>

          <ActionButton
            className={classNames('__wab_instance', sty.actionButton__avMdy)}
            slot={'25'}
          >
            <IconIcon
              className={classNames(projectcss.all, sty.svg___8TnOw)}
              role={'img'}
            />
          </ActionButton>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__lw0Vg)}>
          {p.renderPlasmicSlot({
            defaultContents:
              'Is anyone intentionally using multiple versions of React? (Yeah I know this is generally frowned upon but sometimes you have no other good options for legacy reasons.) I want to know how your build is set up to handle code sharing.',
            value: args.children,
          })}
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__lZVjv)}>
          <ActionButton
            className={classNames('__wab_instance', sty.actionButton__jXlvC)}
            options={['labeled']}
            slot={'25'}
          >
            <ReplyIcon
              className={classNames(projectcss.all, sty.svg__yxEu4)}
              role={'img'}
            />
          </ActionButton>

          <ActionButton
            className={classNames('__wab_instance', sty.actionButton__bc6TD)}
            options={['labeled']}
            slot={'25'}
          >
            <RetweetIcon
              className={classNames(projectcss.all, sty.svg___3LGrn)}
              role={'img'}
            />
          </ActionButton>

          <ActionButton
            className={classNames('__wab_instance', sty.actionButton__hLap)}
            options={['labeled']}
            slot={'25'}
          >
            <LikeIcon
              className={classNames(projectcss.all, sty.svg__shuie)}
              role={'img'}
            />
          </ActionButton>

          <ActionButton
            className={classNames('__wab_instance', sty.actionButton__ouGv)}
            slot={'25'}
          >
            <ShareIcon
              className={classNames(projectcss.all, sty.svg__agVgI)}
              role={'img'}
            />
          </ActionButton>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ['root', 'avatar', 'text'],
  avatar: ['avatar'],
  text: ['text'],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTweet__ArgProps,
      internalVariantPropNames: PlasmicTweet__VariantProps,
    });

    return PlasmicTweet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicTweet';
  } else {
    func.displayName = `PlasmicTweet.${nodeName}`;
  }
  return func;
}

export const PlasmicTweet = Object.assign(
  // Top-level PlasmicTweet renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent('avatar'),
    text: makeNodeComponent('text'),
    // Metadata about props expected for PlasmicTweet
    internalVariantProps: PlasmicTweet__VariantProps,
    internalArgProps: PlasmicTweet__ArgProps,
  }
);

export default PlasmicTweet;
/* prettier-ignore-end */
