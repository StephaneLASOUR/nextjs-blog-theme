// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXtxfUL95PU6ZxWcFtpsj
// Component: eRqh1eQb-6HI
import * as React from 'react';
import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from '@plasmicapp/react-web';
import Avatar from '../../Avatar'; // plasmic-import: r-Q4nz0OELxu/component
import Button from '../../Button'; // plasmic-import: upJGYFxFWp8T/component
import '@plasmicapp/react-web/lib/plasmic.css';
import projectcss from './plasmic_twitter.module.css'; // plasmic-import: tXtxfUL95PU6ZxWcFtpsj/projectcss
import sty from './PlasmicSuggestion.module.css'; // plasmic-import: eRqh1eQb-6HI/css

export const PlasmicSuggestion__VariantProps = new Array();

export const PlasmicSuggestion__ArgProps = new Array(
  'children',
  'slot',
  'slot2'
);

function PlasmicSuggestion__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign({}, props.args);
  const $props = args;
  return (
    <p.Stack
      as={'div'}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Avatar
        data-plasmic-name={'avatar'}
        data-plasmic-override={overrides.avatar}
        className={classNames('__wab_instance', sty.avatar)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={''}
              className={classNames(sty.img__k5Uhi)}
              displayHeight={'49px'}
              displayMaxHeight={'none'}
              displayMaxWidth={'none'}
              displayMinHeight={'0'}
              displayMinWidth={'0'}
              displayWidth={'49px'}
              src={{
                src: '/plasmic/twitter/images/image2.png',
                fullWidth: 225,
                fullHeight: 223,
                aspectRatio: undefined,
              }}
            />
          ),

          value: args.children,
        })}
      </Avatar>

      <div className={classNames(projectcss.all, sty.freeBox__tPatV)}>
        <div className={classNames(projectcss.all, sty.freeBox__dDfJ)}>
          <div className={classNames(projectcss.all, sty.freeBox__yDppL)}>
            {p.renderPlasmicSlot({
              defaultContents: 'Matt Wright',
              value: args.slot,
              className: classNames(sty.slotTargetSlot),
            })}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__asBjc)}>
          {p.renderPlasmicSlot({
            defaultContents: '@mattwright',
            value: args.slot2,
            className: classNames(sty.slotTargetSlot2),
          })}
        </div>
      </div>

      <Button
        data-plasmic-name={'button'}
        data-plasmic-override={overrides.button}
        className={classNames('__wab_instance', sty.button)}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ['root', 'avatar', 'button'],
  avatar: ['avatar'],
  button: ['button'],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSuggestion__ArgProps,
      internalVariantPropNames: PlasmicSuggestion__VariantProps,
    });

    return PlasmicSuggestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicSuggestion';
  } else {
    func.displayName = `PlasmicSuggestion.${nodeName}`;
  }
  return func;
}

export const PlasmicSuggestion = Object.assign(
  // Top-level PlasmicSuggestion renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent('avatar'),
    button: makeNodeComponent('button'),
    // Metadata about props expected for PlasmicSuggestion
    internalVariantProps: PlasmicSuggestion__VariantProps,
    internalArgProps: PlasmicSuggestion__ArgProps,
  }
);

export default PlasmicSuggestion;
/* prettier-ignore-end */
