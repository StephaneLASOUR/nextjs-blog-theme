// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tXtxfUL95PU6ZxWcFtpsj
// Component: WunYD34zulRt
import * as React from 'react';
import Link from 'next/link';
import * as p from '@plasmicapp/react-web';
import * as ph from '@plasmicapp/host';
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from '@plasmicapp/react-web';
import '@plasmicapp/react-web/lib/plasmic.css';
import projectcss from './plasmic_twitter.module.css'; // plasmic-import: tXtxfUL95PU6ZxWcFtpsj/projectcss
import sty from './PlasmicTrend.module.css'; // plasmic-import: WunYD34zulRt/css

export const PlasmicTrend__VariantProps = new Array();

export const PlasmicTrend__ArgProps = new Array('children', 'slot');

function PlasmicTrend__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign({}, props.args);
  const $props = args;
  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={'root'}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      platform={'nextjs'}
    >
      <p.Stack
        as={'div'}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__tHu6L)}
      >
        {p.renderPlasmicSlot({
          defaultContents: 'Entertainment',
          value: args.slot,
          className: classNames(sty.slotTargetSlot),
        })}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__edgWt
          )}
        >
          {'·'}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__l97Hb
          )}
        >
          {'Yesterday'}
        </div>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__ydg3U)}>
        <div className={classNames(projectcss.all, sty.freeBox___2N1Y)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "Adele shares photo supporting Beyoncé's Black is King",
            value: args.children,
            className: classNames(sty.slotTargetChildren),
          })}
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ['root'],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTrend__ArgProps,
      internalVariantPropNames: PlasmicTrend__VariantProps,
    });

    return PlasmicTrend__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === 'root') {
    func.displayName = 'PlasmicTrend';
  } else {
    func.displayName = `PlasmicTrend.${nodeName}`;
  }
  return func;
}

export const PlasmicTrend = Object.assign(
  // Top-level PlasmicTrend renders the root element
  makeNodeComponent('root'),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicTrend
    internalVariantProps: PlasmicTrend__VariantProps,
    internalArgProps: PlasmicTrend__ArgProps,
  }
);

export default PlasmicTrend;
/* prettier-ignore-end */
